{
  "name": "NXP CodeWarrior",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#symbols" },
    { "include": "#operators" },
    { "include": "#directives" },
    { "include": "#mnemonics" }
  ],
  "repository": {
    "comments":
    {
      "name": "comment.line.codewarrior",
      "match": "[;\\#].*$"
    },
    "strings": 
    {
			"name": "string.quoted.double.codewarrior",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.codewarrior",
					"match": "\\\\."
				}
			]
		},
    "symbols": 
    { 
      "patterns": [
      {
        "name": "entity.name.function.label.codewarrior",
        "match": "^[A-Za-z\\._][A-Za-z0-9\\._]*(?=\\:)"
      },
      {
        "name": "entity.name.function.label.codewarrior",
        "match": "[0-9]*(?=\\$)"
      },
      {
        "name": "entity.name.function.label.codewarrior",
        "match": "\\.[0-9]*"
      },
      {
        "name": "constant.numeric.hex.codewarrior",
        "match": "\\-?\\b(?i)0x[a-fA-Z0-9]+\\b"
      },
      {
        "name": "constant.numeric.binary.codewarrior",
        "match": "\\-?\\b(?i)0b[01]+"
      },
      {
        "name": "constant.numeric.octal.codewarrior",
        "match": "\\-?\\b0[0-7]+"
      },
      {
        "name": "constant.numeric.decimal.codewarrior",
        "match": "\\b[0-9]+\\b"
      },
      {
        "name": "variable.language.register.codewarrior",
        "match": "\\b([da][0-7]|u?sp|ccr|pc|sr)\\b"
      }
      ]
    },
    "operators":
    {
      "name": "keyword.operator.codewarrior",
      "match":  "!|&|&&|\\^|\\*|\\/{1,2}|\\-|\\+|~|=(\\.[sdxp])?|<=|>=|<<|>>|<>|<|>|\\||\\|\\|"
    },
    "directives": 
    {
      "patterns": [
      {
        "name": "support.function.pseudo.codewarrior",
        "match": "\\.\\b(([248])?byte|asciiz?|abort|align|balign([lw])?|l?comm|double|endr|equ(iv)?|err|extern|fail|file|float|globl|half|inc(bin|dir|clude)|int|irpc?|list|local|long|nolist|org|p2align([lw])?|quad|rept|section|set|size|short|single|skip|space|stab[snd]|string|swbeg|type|uahalf|uaquad|uashort|uaword|weak|word|zero|bss|data|rodata|sbss|sdata|sdata2|stab|stabdtr|text|tocd)\\b"
      },
      {
        "name": "keyword.control.conditional.codewarrior",
        "match": "\\.\\b(else|endif|if(eq|ne|gt|ge|lt)|(n)?[bcd]|ifmacro(n)?d|iff)\\b"
      },
      {
        "name": "support.function.pseudo.codewarrior",
        "match": "\\.\\b(macro|endm)\\b"
      }
      ]
    },
    "mnemonics": 
    {
       "patterns": [
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(fdmove|fmovem)(\\.d)?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(fmove|fsmove)(\\.[bwlsd])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(unlk)\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(moveq)(\\.[b])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(link)(\\.[w])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)([pl]ea|mov3q|movclr|movem)(\\.[l])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(mv[sz])(\\.[bw])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(movea)(\\.[wl])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(move)(\\.[bwl])?\\b"
        }
        ]
    }
  },
  "scopeName": "source.codewarrior"
}
