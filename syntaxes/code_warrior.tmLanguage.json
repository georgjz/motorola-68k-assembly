{
  "name": "NXP CodeWarrior",
  "patterns": [
    { "include": "#comments" },
    { "include": "#strings" },
    { "include": "#symbols" },
    { "include": "#operators" },
    { "include": "#directives" },
    { "include": "#mnemonics" }
  ],
  "repository": {
    "comments":
    {
      "name": "comment.line.codewarrior",
      "match": "[\\;\\#\\*(\\-\\-)(\\/\\/)].*$"
    },
    "strings": 
    {
			"name": "string.quoted.double.codewarrior",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.codewarrior",
					"match": "\\\\."
				}
			]
		},
    "symbols": 
    { 
      "patterns": [
      {
        "name": "entity.name.function.label.codewarrior",
        "match": "^\\@?[A-Za-z\\._][A-Za-z0-9\\._]*(?=\\:)"
      },
      {
        "name": "constant.numeric.hex.codewarrior",
        "match": "\\-?\\b0x[a-fA-F0-9]+\\b"
      },
      {
        "name": "constant.numeric.hex.codewarrior",
        "match": "\\-?\\b0[a-fA-F0-9]+h\\b"
      },
      {
        "name": "constant.numeric.binary.codewarrior",
        "match": "%[01]+"
      },
      {
        "name": "constant.numeric.binary.codewarrior",
        "match": "\\b(?i)0b[01]+"
      },
      {
        "name": "constant.numeric.octal.codewarrior",
        "match": "\\-?\\b0[0-7]+"
      },
      {
        "name": "constant.numeric.decimal.codewarrior",
        "match": "\\-?\\b[0-9]+d?\\b"
      }
      ]
    },
    "operators":
    {
      "name": "keyword.operator.codewarrior",
      "match":  "!|&|&&|\\^|\\*|\\/{1,2}|\\-|\\+|~|=(\\.[sdxp])?|<=|>=|<<|>>|<>|<|>|\\||\\|\\|"
    },
    "directives": 
    {
      "patterns": [
      {
        "name": "support.function.pseudo.codewarrior",
        "match": "\\.\\b(option|debug)\\b"
      },

      {
        "name": "support.function.pseudo.codewarrior",
        "match": "\\#\\b((un)?define|(el|end)if|else|error|ifn?def|include|line|pragma)\\b"
      },
      {
        "name": "support.function.pseudo.codewarrior",
        "match": "\\.\\b(macro|endm|mexit|else(if)?|(end)?if|if(n?c|n?def|eq|ge|gt|le|lt|ne)|bss|data|debug|offset|previous|rodata|sbss2?|sdata([02])?|section|text|extern|global|public|equ|set|textequ|ascii|asciz|byte|double|float|long|short|space|align|endian|error|include|option|org|pragma|file|line|size|type)\\b"
      }
      ]
    },
    "mnemonics": 
    {
       "patterns": [
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(fdmove|fmovem)(\\.d)?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(fmove|fsmove)(\\.[bwlsd])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(unlk)\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(moveq)(\\.[b])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(link)(\\.[w])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)([pl]ea|mov3q|movclr|movem)(\\.[l])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(mv[sz])(\\.[bw])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(movea)(\\.[wl])?\\b"
        },
        {
          "name": "keyword.mnemonic.codewarrior",
          "match": "\\b(?i)(move)(\\.[bwl])?\\b"
        }
        ]
    }
  },
  "scopeName": "source.codewarrior"
}
